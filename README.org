#+TITLE: Omni-Log

[[https://travis-ci.org/AdrieanKhisbe/omni-log.el][file:https://travis-ci.org/AdrieanKhisbe/omni-log.el.svg]]
[[https://coveralls.io/r/AdrieanKhisbe/omni-log.el][file:https://coveralls.io/repos/AdrieanKhisbe/omni-log.el/badge.svg]]
[[http://melpa.org/#/omni-log][file:http://melpa.org/packages/omni-log-badge.svg]]
[[http://stable.melpa.org/#/omni-log][file:http://stable.melpa.org/packages/omni-log-badge.svg]]
[[https://github.com/AdrieanKhisbe/omni-log.el/tags][file:https://img.shields.io/github/tag/AdrieanKhisbe/omni-log.el.svg]]
[[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]]

/Log All The Things!/

** Description
This /in early development/ library is to provide logging faculty.

These enable to create logger and logger function that print message to the
/echo Area/ and append them in a dedicated buffer.

** Usage
+ Create a logger:
  #+BEGIN_SRC emacs-lisp
    (require 'omni-log)

    (let ((my-logger (omni-log-create-logger "ansible" '((prompt . ">x>")))))
      (omni-log-create-log-function my-logger) ;; create a log-ansible function
      my-logger)
  #+END_SRC
+ Use the logger:
  #+BEGIN_SRC emacs-lisp
    (logger-ansible "my message")
    ;; Â§later: rest options
  #+END_SRC


An omni-log can take an extra set of option in an alist to customize it's behavior.
Here is the list
- prompt :: a prefix string used in the logged messages
- fading :: boolean option to have the message fade away
- fading-delay :: delay in second after which the fading begin
- fading-duration :: duration in second of the fading effect

** Installation
Omni-log is available on melpa, just do a =(package-install 'omni-log)= to retrieve it

** Notes
This is still a prototype. I use it on my =omni-quotes= package, but API is not frozen yet.

*If you have any remark, refactor suggestion or else, just pose an issue ;)
