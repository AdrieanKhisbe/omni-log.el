#+TITLE: Omni-Log

[[https://travis-ci.org/AdrieanKhisbe/omni-log.el][file:https://travis-ci.org/AdrieanKhisbe/omni-log.el.svg]]
[[https://coveralls.io/r/AdrieanKhisbe/omni-log.el][file:https://coveralls.io/repos/AdrieanKhisbe/omni-log.el/badge.svg]]
[[http://melpa.org/#/omni-log][file:http://melpa.org/packages/omni-log-badge.svg]]
[[http://stable.melpa.org/#/omni-log][file:http://stable.melpa.org/packages/omni-log-badge.svg]]
[[https://github.com/AdrieanKhisbe/omni-log.el/tags][file:https://img.shields.io/github/tag/AdrieanKhisbe/omni-log.el.svg]]
[[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]]

/Log All The Things!/

* Description
This library provides logging faculty.
It enable you to create logger and logger function that print message to the
/echo Area/ and append them in a dedicated buffer.

#+BEGIN_SRC emacs-lisp
  (require 'omni-log)

  (omni-log-create-logger "my-logger")
  (log-my-logger "Hello World")
  ;; Hello World print in the echo area and *my-logger* buffer
#+END_SRC

* Usage
+ Create a logger:
  #+BEGIN_SRC emacs-lisp
    (require 'omni-log)

    (setq my-logger (let ((my-logger (omni-log-create-logger "ansible" '((prompt . ">x>")))))
                      (omni-log-create-log-function my-logger) ;; create a log-ansible function
                      my-logger))
    ;; (ansible is a "category of fictional device or technology capable of instantaneous or superluminal communication")

    ;; or with a one liner:
    (omni-log-create "ansible-bis" '((prompt . ">")))
  #+END_SRC
+ Use the logger:
  #+BEGIN_SRC emacs-lisp
    (logger-ansible "my message")
    (logger-ansible "Hello %s" "World")

    (log "ansible" "Coucou :)")
    (log my-logger "Log all the things")
  #+END_SRC
+ Modify the logger afterward
  #+BEGIN_SRC emacs-lisp
    ;; set the fading option t the logger
    (omni-log-logger-set-property my-logger 'fading t)
    (omni-log-logger-set-property my-logger 'fading nil)

    ;; destroy the logger once done
    (omni-log-kill-logger my-logger)
  #+END_SRC

An omni-log can take an extra set of option in an alist to customize it's behavior.
Here is the list
- prompt :: a prefix string used in the logged messages
- fading :: boolean option to have the message fade away
- fading-delay :: delay in second after which the fading begin
- fading-duration :: duration in second of the fading effect

* Installation
Omni-log is available on melpa, just do a =(package-install 'omni-log)= to retrieve it

* Notes

It works but this is still a prototype. I use it on my =omni-quotes= package, but API is not frozen yet.

*If you have any remark, refactor suggestion or else, just pose an issue ;)*
